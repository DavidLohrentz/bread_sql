-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

DROP VIEW IF EXISTS phone_book, staff_list;

DROP TABLE IF EXISTS parties, people_st, staff_st, 
     organization_st, phones, zip_codes, doughs;

CREATE TABLE parties (
       party_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
       party_type char(1) check (party_type in ('i', 'o')) NOT NULL,
       party_name VARCHAR(80) NOT NULL,
       PRIMARY KEY (party_id, party_type)
);

-- For "persons", a subtype of parties
CREATE TABLE people_st (
       party_id INTEGER PRIMARY KEY,
       party_type CHAR(1) default 'i' check (party_type = 'i') NOT NULL,
       first_name VARCHAR(25) NOT NULL,
       FOREIGN KEY (party_id, party_type) references parties (party_id, party_type))
;

CREATE TABLE zip_codes (
    zip_code CHAR(5) PRIMARY KEY,
    city VARCHAR(70) NOT NULL,
    state CHAR(2) NOT NULL
);

-- For "staff, a subtype of people
CREATE TABLE staff_st (
       party_id INTEGER PRIMARY KEY,
       party_type CHAR(1) default 'i' check (party_type = 'i') NOT NULL,
       ssn CHAR(11) NOT NULL,
       hire_date DATE NOT NULL,
       is_active BOOLEAN NOT NULL,
       street_no VARCHAR(12) NOT NULL,
       street VARCHAR(30) NOT NULL,
       zip CHAR(5) NOT NULL REFERENCES zip_codes(zip_code),
       FOREIGN KEY (party_id, party_type) references parties (party_id, party_type),
       FOREIGN KEY (party_id) references people_st (party_id))
;

-- For "organizations", a subtype of parties
CREATE TABLE organization_st (
       party_id INTEGER PRIMARY KEY,
       party_type CHAR(1) default 'o' check (party_type = 'o') NOT NULL,
       org_type CHAR(1) NOT NULL,
       CONSTRAINT check_org_in_list CHECK 
            (org_type IN('b', 'n', 'g')),
            -- b = Business, n = Nonprofit, g = Gov't
       ein CHAR(10) UNIQUE NOT NULL,
       FOREIGN KEY (party_id, party_type) references parties (party_id, party_type))
;

CREATE TABLE phones (
       party_id INTEGER NOT NULL,
       phone_type char(1) not null default 'm' check 
            (phone_type in ('w', 'h', 'f', 'b', 'm', 'e')),
            -- work, home, fax, business, mobile, emergency
       phone_no VARCHAR(25) UNIQUE NOT NULL,
       primary key (party_id, phone_type)
);

CREATE TABLE doughs (
    dough_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dough_name VARCHAR(70) UNIQUE NOT NULL,
    lead_time_days INTEGER NOT NULL
);

CREATE TABLE shapes (
    shape_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    shape_name VARCHAR(70) UNIQUE NOT NULL
);

CREATE OR REPLACE VIEW phone_book AS 
WITH typology (party_id, phone_type_abbr, type) AS
     (SELECT party_id, phone_type,  
        CASE WHEN phone_type = 'w' THEN 'work'
            WHEN phone_type = 'h' THEN 'home'
            WHEN phone_type = 'f' THEN 'fax'
            WHEN phone_type = 'b' THEN 'business'
            WHEN phone_type = 'm' THEN 'mobile'
            WHEN phone_type = 'e' THEN 'emergency'
        END
     FROM phones),

name_merge (party_id, new_name) AS
     (SELECT p.party_id, 
       CASE WHEN pe.party_type = 'i' THEN pe.first_name || ' ' || p.party_name
       ELSE p.party_name
       END 
     FROM parties AS p
          FULL JOIN people_st as pe on p.party_id = pe.party_id)

SELECT ph.party_id, nm.new_name AS name, p.party_type, t.type, ph.phone_no
  FROM phones AS ph
  JOIN name_merge as nm on ph.party_id = nm.party_id
  JOIN typology AS t ON ph.party_id = t.party_id AND ph.phone_type = t.phone_type_abbr
  JOIN parties AS p on ph.party_id = p.party_id
  LEFT JOIN people_st AS pe ON ph.party_id = pe.party_id
 ORDER BY ph.party_id, t.type;

CREATE OR REPLACE VIEW staff_list AS 
SELECT s.party_id, pe.first_name, p.party_name AS last_name, 
       s.ssn, s.is_active, s.hire_date, s.street_no, s.street, 
       z.city, z.state, s.zip, ph.phone_no AS mobile
FROM staff_st AS s
JOIN people_st AS pe on s.party_id = pe.party_id
JOIN parties AS p on s.party_id = p.party_id AND s.party_type = p.party_type
JOIN phone_book as ph ON s.party_id = ph.party_id
JOIN zip_codes AS z on s.zip = z.zip_code
WHERE ph.type = 'mobile';

INSERT INTO zip_codes (zip_code, city, state)
VALUES (53705, 'Madison', 'WI'),
       (53703, 'Madison', 'WI'),
       (53562, 'Middleton', 'WI')
;

INSERT INTO parties (party_type, party_name)
VALUES ('o', 'ABC Co'),
       ('o', 'Foo Bar'),
       ('i', 'mylast'),
       ('i', 'Blow')
;

INSERT INTO people_st (party_id, party_type, first_name)
VALUES (3, 'i', 'myfirst'),
       (4, 'i', 'Joe')
;

            --shapes
INSERT INTO shapes (shape_name)
     VALUES ('12" Boule'),
            ('4" pan loaves'),
            ('16" pizza'),
            ('7" pita')
;

            --doughs
INSERT INTO doughs (dough_name, lead_time_days)
     VALUES ('cranberry walnut Sourdough', 2),
            ('pizza dough', 1),
            ('rugbrod', 2),
            ('Kamut Sourdough', 2),
            ('pita bread', 1)
;

INSERT INTO staff_st (party_id, party_type, ssn, is_active, hire_date,
       street_no, street, zip)
VALUES (3, 'i', '123-45-6789', TRUE, '2019-10-01', '2906', 'Barlow St', 53705),
       (4, 'i', '121-21-2121', FALSE, '2017-12-30', '924', 'Williamson St', 53703)
;

INSERT INTO organization_st (party_id, party_type, ein, org_type)
VALUES (1, 'o', '0123456789', 'b'),
       (2, 'o', '1111111111', 'n')
;

INSERT INTO phones (party_id, phone_type, phone_no)
VALUES (3, 'm', '555-1212'),
       (3, 'w', '608-555-0000'),
       (2, 'b', '608-555-0011'),
       (1, 'w', '608-555-1111'),
       (4, 'm', '608-555-2222'),
       (4, 'w', '608-555-3333'),
       (3, 'e', '608-555-1234'),
       (1, 'f', '608-000-0000')
;

SELECT pe.party_id, pe.first_name, p.party_name AS last_name
  FROM people_st AS pe
  JOIN parties AS p ON pe.party_id = p.party_id
;

SELECT *
  FROM organization_st;

SELECT *
  FROM parties;

SELECT * 
  FROM phone_book;

SELECT * 
  FROM staff_list;

SELECT * 
  FROM doughs;
