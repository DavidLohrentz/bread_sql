-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

DROP VIEW IF EXISTS phone_book;

DROP TABLE IF EXISTS parties, people_st, organization_st, phones;

CREATE TABLE parties (
       party_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
       party_type char(1) check (party_type in ('i', 'o')) NOT NULL,
       party_name VARCHAR(80) NOT NULL,
       PRIMARY KEY (party_id, party_type)
);

-- For "persons", a subtype of parties
CREATE TABLE people_st (
       party_id INTEGER PRIMARY KEY,
       party_type CHAR(1) default 'i' check (party_type = 'i') NOT NULL,
       first_name VARCHAR(25) NOT NULL,
       FOREIGN KEY (party_id, party_type) references parties (party_id, party_type))
;

-- For "organizations", a subtype of parties
CREATE TABLE organization_st (
       party_id INTEGER PRIMARY KEY,
       party_type CHAR(1) default 'o' check (party_type = 'o') NOT NULL,
       org_type CHAR(1) NOT NULL,
       CONSTRAINT check_org_in_list CHECK 
            (org_type IN('b', 'n', 'g')),
            -- b = Business, n = Nonprofit, g = Gov't
       ein CHAR(10) UNIQUE NOT NULL,
       FOREIGN KEY (party_id, party_type) references parties (party_id, party_type))
;

CREATE TABLE phones (
       party_id INTEGER NOT NULL,
       phone_type char(1) not null default 'w' check 
            (phone_type in ('w', 'h', 'f', 'b', 'm', 'e')),
            -- work, home, fax, business, mobile, emergency
       phone_no VARCHAR(25) UNIQUE NOT NULL,
       primary key (party_id, phone_type)
);

CREATE OR REPLACE VIEW phone_book AS 
WITH typology (party_id, phone_type_abbr, type) AS
     (SELECT party_id, phone_type,  
        CASE WHEN phone_type = 'w' THEN 'work'
            WHEN phone_type = 'h' THEN 'home'
            WHEN phone_type = 'f' THEN 'fax'
            WHEN phone_type = 'b' THEN 'business'
            WHEN phone_type = 'm' THEN 'mobile'
            WHEN phone_type = 'e' THEN 'emergency'
        END
     FROM phones),

name_merge (party_id, new_name) AS
     (SELECT p.party_id, 
       CASE WHEN pe.party_type = 'i' THEN pe.first_name || ' ' || p.party_name
       ELSE p.party_name
       END 
     FROM parties AS p
          FULL JOIN people_st as pe on p.party_id = pe.party_id)

SELECT nm.new_name AS name, p.party_type, t.type, ph.phone_no
  FROM phones AS ph
  JOIN name_merge as nm on ph.party_id = nm.party_id
  JOIN typology AS t ON ph.party_id = t.party_id AND ph.phone_type = t.phone_type_abbr
  JOIN parties AS p on ph.party_id = p.party_id
  LEFT JOIN people_st AS pe ON ph.party_id = pe.party_id;

INSERT INTO parties (party_type, party_name)
VALUES ('o', 'ABC Co'),
       ('o', 'Foo Bar'),
       ('i', 'mylast'),
       ('i', 'Blow')
;

INSERT INTO people_st (party_id, party_type, first_name)
VALUES (3, 'i', 'myfirst'),
       (4, 'i', 'Joe')
;

INSERT INTO organization_st (party_id, party_type, ein, org_type)
VALUES (1, 'o', '0123456789', 'b'),
       (2, 'o', '1111111111', 'n')
;

INSERT INTO phones (party_id, phone_type, phone_no)
VALUES (3, 'm', '555-1212'),
       (3, 'w', '608-555-0000'),
       (1, 'b', '800-000-0000')
;

SELECT pe.party_id, pe.first_name, p.party_name AS last_name
  FROM people_st AS pe
  JOIN parties AS p ON pe.party_id = p.party_id
;

SELECT *
  FROM organization_st;

SELECT *
  FROM parties;

SELECT *
  FROM phones;

SELECT * 
  FROM phone_book;
